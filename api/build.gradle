plugins {
    id 'buildlogic.java-spring-conventions'

    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Project dependencies
    implementation project(':utilities')
    implementation project(':shared:spring-base')

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.+'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('dev') {
    doFirst {
        // Start continuous build in background
        ProcessBuilder buildProcess = new ProcessBuilder(
                isWindows() ? 'gradlew.bat' : './gradlew',
                ':api:build',
                '--continuous'
        )
        buildProcess.redirectOutput(ProcessBuilder.Redirect.INHERIT)
        buildProcess.redirectError(ProcessBuilder.Redirect.INHERIT)
        buildProcess.start()
    }

    finalizedBy(':api:bootRun')
}

static def isWindows() {
    return System.getProperty('os.name').toLowerCase().contains('windows')
}