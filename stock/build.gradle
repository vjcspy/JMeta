plugins {
	id 'buildlogic.java-spring-conventions'

	// spring
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency)

	// spotless
	alias(libs.plugins.spotless)
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// ________________ Dependencies ________________
	// Database
	runtimeOnly 'org.postgresql:postgresql'

	// ________________ Project dependencies ________________
	implementation project(':shared:event-manager')
	implementation project(':shared:spring-base')
	implementation project(':shared:tedbed')
}

tasks.register('dev') {
	doFirst {
		// Start continuous build in background
		ProcessBuilder buildProcess = new ProcessBuilder(
				isWindows() ? 'gradlew.bat' : './gradlew',
				':stock:build',
				'--continuous'
		)
		buildProcess.redirectOutput(ProcessBuilder.Redirect.INHERIT)
		buildProcess.redirectError(ProcessBuilder.Redirect.INHERIT)
		buildProcess.start()
	}

	finalizedBy(':stock:bootRun')
}

static def isWindows() {
	return System.getProperty('os.name').toLowerCase().contains('windows')
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		target '**/src/**/*.java'

		// Use the default importOrder configuration
		importOrder()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()          // has its own section below

		// formatters.
		palantirJavaFormat()

		formatAnnotations()  // fixes formatting of type annotations, see below

		licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}
